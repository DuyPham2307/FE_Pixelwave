import axios from "axios";

const api = axios.create({
	baseURL: import.meta.env.VITE_API_URL || "http://localhost:8080",
	withCredentials: true,
});

api.interceptors.response.use(
	(response) => response,
	(error) => {
		const msg = error?.response?.data;

		if (
			error.response?.status === 500 &&
			typeof msg === "string" &&
			(msg.includes("Refresh token") || msg.includes("Invalid refresh token"))
		) {
			console.warn("üîí Refresh token expired or invalid. Logging out...");
			localStorage.removeItem("accessToken");
			localStorage.removeItem("refreshToken"); // Xo√° token trong localStorage/cookie
			window.location.href = "/login"; // ho·∫∑c navigate("/login")
		}

		return Promise.reject(error);
	}
);

api.interceptors.request.use(
	async (config) => {
		// L·∫•y accessToken t·ª´ localStorage
		const accessToken = localStorage.getItem("accessToken");

		// N·∫øu accessToken c√≥ v√† h·ª£p l·ªá, th√™m v√†o header
		if (accessToken) {
			config.headers["Authorization"] = `Bearer ${accessToken}`;
		}

		return config;
	},
	(error) => {
		return Promise.reject(error);
	}
);

// C·∫•u h√¨nh response interceptor ƒë·ªÉ x·ª≠ l√Ω khi token h·∫øt h·∫°n
api.interceptors.response.use(
	(response) => {
		return response; // N·∫øu response th√†nh c√¥ng, tr·∫£ v·ªÅ
	},
	async (error) => {
		const originalRequest = error.config;

		// Ki·ªÉm tra n·∫øu l·ªói l√† do token h·∫øt h·∫°n (HTTP 401)
		if (error.response.status === 401 && !originalRequest._retry) {
			originalRequest._retry = true; // ƒê√°nh d·∫•u l√† ƒë√£ th·ª≠ l·∫°i

			// L·∫•y refreshToken t·ª´ localStorage
			const refreshToken = localStorage.getItem("refreshToken");

			if (refreshToken) {
				try {
					// G·ª≠i y√™u c·∫ßu l√†m m·ªõi accessToken v·ªõi refreshToken
					const response = await axios.post("/api/refresh-token", {
						refreshToken,
					});

					// N·∫øu l√†m m·ªõi th√†nh c√¥ng, l∆∞u l·∫°i accessToken m·ªõi
					const newAccessToken = response.data.accessToken;
					const newRefreshToken = response.data.refreshToken;
					localStorage.setItem("accessToken", newAccessToken);
					localStorage.setItem("refreshToken", newRefreshToken);

					// Th√™m accessToken m·ªõi v√†o l·∫°i header c·ªßa y√™u c·∫ßu ban ƒë·∫ßu
					originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;

					// G·ª≠i l·∫°i y√™u c·∫ßu ban ƒë·∫ßu v·ªõi accessToken m·ªõi
					return api(originalRequest);
				} catch (refreshError) {
					// N·∫øu l·ªói khi l√†m m·ªõi token (v√≠ d·ª•: refreshToken h·∫øt h·∫°n), y√™u c·∫ßu ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p l·∫°i
					console.error(
						"Refresh token expired or invalid. Please log in again.",
						refreshError
					);
					localStorage.removeItem("accessToken");
					localStorage.removeItem("refreshToken");
					window.location.href = "/login";
					return Promise.reject(refreshError);
					// Redirect to login page or handle as needed
				}
			}
		}

		return Promise.reject(error);
	}
);

export default api;
